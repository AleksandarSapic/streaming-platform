name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Java and Node versions
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  
jobs:
  # Backend testing and build job
  test-and-build-backend:
    name: Test and Build Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Run backend tests
        run: ./mvnw test
      
      - name: Build backend JAR
        run: ./mvnw clean package -DskipTests
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar
          retention-days: 1

  # Frontend testing and build job
  test-and-build-frontend:
    name: Test and Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Run frontend tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless
      
      - name: Build frontend application
        run: npm run build
      
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # Docker build job - runs only after successful backend and frontend builds
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-and-build-backend, test-and-build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target/
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images with docker compose
        run: docker compose build --parallel
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
      
      - name: Verify Docker images
        run: |
          echo "Built Docker images:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
      
      - name: Test Docker containers startup
        run: |
          echo "Testing container startup..."
          docker compose up -d
          sleep 10
          docker compose ps
          docker compose down
